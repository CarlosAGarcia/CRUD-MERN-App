{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\CAGE\\\\Documents\\\\formSite\\\\client\\\\src\\\\App.js\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\nmutation($name: String!, $number: String!, $email : String!, $dob : String!){\\n  createClient(name:$name, number:$number, email:$email, dob:$dob){\\n    name,\\n    number,\\n    email,\\n    dob,\\n    id\\n  }\\n}\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\nmutation($id:ID!){\\n\\tremoveClient(id:$id)\\n}\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\nmutation($id:ID!, $name: String!, $number: String!, $email : String!, $dob : String!){\\n  editText(id:$id,name:$name, number:$number, email:$email, dob:$dob)\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n  clients {\\n    name\\n    number\\n    dob\\n    email\\n    id\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Form from \"./Form\";\nimport TableRow from \"./TableRow\";\nimport { auto } from 'async';\nimport Divider from '@material-ui/core/Divider'; //graph QL queries are set to constant \n\nvar ClientQuery = gql(_templateObject());\nvar editMutation = gql(_templateObject2());\nvar RemoveMutation = gql(_templateObject3());\nvar CreateMutation = gql(_templateObject4());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.createClient =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var name, number, email, dob;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                name = _ref.name, number = _ref.number, email = _ref.email, dob = _ref.dob;\n                _context.next = 3;\n                return _this.props.createClient({\n                  variables: {\n                    name: name,\n                    number: number,\n                    email: email,\n                    dob: dob\n                  },\n                  refetchQueries: [{\n                    query: ClientQuery\n                  }]\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.editText =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref3) {\n        var client, name2, number2, email2, dob2;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                client = _ref3.client, name2 = _ref3.name2, number2 = _ref3.number2, email2 = _ref3.email2, dob2 = _ref3.dob2;\n                _context2.next = 3;\n                return _this.props.editText({\n                  variables: {\n                    id: client.id,\n                    name: name2,\n                    number: number2,\n                    email: email2,\n                    dob: dob2\n                  },\n                  refetchQueries: [{\n                    query: ClientQuery\n                  }]\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.removeClient =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(client) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.props.removeClient({\n                  variables: {\n                    id: client.id\n                  },\n                  refetchQueries: [{\n                    query: ClientQuery\n                  }]\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //only renders the clients if the server data has loaded\n      var _this$props$data = this.props.data,\n          loading = _this$props$data.loading,\n          clients = _this$props$data.clients;\n\n      if (loading) {\n        return null;\n      }\n\n      return (\n        /*renders the header, paper, list and form at the end to add clients\n        all clients on server are passed to App through the props by the Apollo Provider\n        each client is rendered as a list item \n        */\n        React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            margin: \"auto\",\n            width: auto\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            margin: '1em 0 0 0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"Clients \"), React.createElement(Paper, {\n          style: {\n            margin: '3em 0 0 0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(List, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, this.props.data.clients.map(function (client) {\n          return React.createElement(\"div\", {\n            key: client.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }, React.createElement(ListItem, {\n            role: undefined,\n            style: {\n              margin: '1em 1em 1em 1em'\n            },\n            dense: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(TableRow, {\n            row: _this2.props.row,\n            client: client,\n            removeClient: _this2.removeClient,\n            editText: _this2.editText,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          })), React.createElement(Divider, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }));\n        })), React.createElement(\"p\", {\n          style: {\n            margin: '1em 1em 1em 1em'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Add New Client\"), React.createElement(Form, {\n          clients: clients,\n          createClient: this.createClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }))))\n      );\n    }\n  }]);\n\n  return App;\n}(Component); //compose function is given by Apollo to wrap the graphQL queries so they can be used by the functions in component\n//passes in the functions editText, CreateClient, removeClient as props to App\n\n\nexport default compose(graphql(editMutation, {\n  name: \"editText\"\n}), graphql(CreateMutation, {\n  name: \"createClient\"\n}), graphql(RemoveMutation, {\n  name: \"removeClient\"\n}), graphql(ClientQuery))(App);","map":{"version":3,"sources":["C:\\Users\\CAGE\\Documents\\formSite\\client\\src\\App.js"],"names":["React","Component","gql","graphql","compose","Paper","List","ListItem","Form","TableRow","auto","Divider","ClientQuery","editMutation","RemoveMutation","CreateMutation","App","createClient","name","number","email","dob","props","variables","refetchQueries","query","editText","client","name2","number2","email2","dob2","id","removeClient","data","loading","clients","display","margin","width","justifyContent","map","undefined","row"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport gql from \"graphql-tag\";\nimport { graphql,compose } from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Form from \"./Form\";\nimport TableRow from \"./TableRow\";\nimport { auto } from 'async';\nimport Divider from '@material-ui/core/Divider';\n\n//graph QL queries are set to constant \nconst ClientQuery = gql`\n{\n  clients {\n    name\n    number\n    dob\n    email\n    id\n  }\n}\n`;\nconst editMutation = gql`\nmutation($id:ID!, $name: String!, $number: String!, $email : String!, $dob : String!){\n  editText(id:$id,name:$name, number:$number, email:$email, dob:$dob)\n}\n`;\n\n\nconst RemoveMutation = gql`\nmutation($id:ID!){\n\tremoveClient(id:$id)\n}\n`;\n\nconst CreateMutation  = gql`\nmutation($name: String!, $number: String!, $email : String!, $dob : String!){\n  createClient(name:$name, number:$number, email:$email, dob:$dob){\n    name,\n    number,\n    email,\n    dob,\n    id\n  }\n}\n`;\n\n\nclass App extends Component {\n\n  /*\n  various async functions which call their respective props passed into App by the compose function\n  variables are what is passed to the server while refetchQueries is what updates the clients by re-querying clients\n  */\n  createClient = async ({name, number, email, dob}) =>{\n    await this.props.createClient({\n      variables:{\n        name,\n        number,\n        email,\n        dob\n      }, refetchQueries: [{\n        query: ClientQuery\n      }]\n    });\n  };\n  \n\n  editText = async ({client,name2, number2, email2, dob2}) => {\n    await this.props.editText({\n      variables:{\n        id : client.id,\n        name: name2,    \n        number: number2,\n        email: email2,\n        dob: dob2\n      }, refetchQueries: [{\n        query: ClientQuery\n      }]\n    });\n  };\n\n  removeClient = async client =>{  \n      await this.props.removeClient({\n        variables:{\n          id : client.id      \n        }, refetchQueries: [{\n          query: ClientQuery\n        }]\n      });\n  };\n\n  render() {\n  \n    //only renders the clients if the server data has loaded\n    const {data:{loading, clients}} = this.props; \n    if (loading){\n      return null;\n    } \n\n    return (\n      \n      /*renders the header, paper, list and form at the end to add clients\n      all clients on server are passed to App through the props by the Apollo Provider\n      each client is rendered as a list item \n      */\n      <div style={{display:'flex'}}> \n        <div style={{margin:\"auto\", width: auto}}>\n        \n            <h1 style={{ display: 'flex', justifyContent: 'center',margin: '1em 0 0 0' }}>Clients </h1> \n            <Paper style={{margin: '3em 0 0 0'}}>\n            <List>\n            {this.props.data.clients.map(client => (\n                <div key={client.id} >\n                <ListItem role={undefined} style={{margin: '1em 1em 1em 1em'}} dense>                  \n                    <TableRow row = {this.props.row} client = {client} removeClient={this.removeClient} editText={this.editText}></TableRow>\n                </ListItem> \n                <Divider/>\n                </div>           \n              ))}\n            </List> \n            <p style={{margin: '1em 1em 1em 1em'}}>Add New Client</p>\n\n            <Form clients = {clients} createClient={this.createClient} ></Form>             \n            </Paper>\n        </div>\n      </div>\n    \n    )\n  }\n}\n\n\n//compose function is given by Apollo to wrap the graphQL queries so they can be used by the functions in component\n//passes in the functions editText, CreateClient, removeClient as props to App\n\nexport default compose(\ngraphql(editMutation, {name:\"editText\"}),\ngraphql(CreateMutation, {name:\"createClient\"}),\ngraphql(RemoveMutation, {name:\"removeClient\"}),\ngraphql(ClientQuery))(App);\n"]},"metadata":{},"sourceType":"module"}